import System;
import System.Assert;

module Sily.String.Getopt {
    // enum FlagType {
    //     INT, DOUBLE, STRING, BOOL
    // }

    /**
    * Returns flag value from `args[]` and removes flag and value from `args[]`. \
    * Search is case sensitive. For bools short args can be merged, aka `-cav`
    * @param {string[]} args
    * @param {string} flag In form of "longFlag|short|s..." (aka. "long|s").  \
    * Short flags are optional. To Get only short flag type "|s".
    * @param {any} defret Default return. If `null` returns `false`, `""` or `0`
    * @returns {any}
    */
    public T getopt<T>(string[] args, string flag, T defret) {
        string dargs = [...args];
        if ((idx = dargs.indexOf("--")) != -1) {
            dargs.splice(idx);
        }

        return defret;
    }
}

// void doUnitTest() {
//     string[] arr = ["app", "-f", "--force", "--h", "ytay", "1", "-v", "1", "abara"];
//     assert(getopt<bool>(arr, "force|f") == true, "-f");
//     assert(getopt<bool>(arr, "|c") == false, "-c");
//     assert(getopt<int>(arr, "|v") == 1, "-v");
//     assert(getopt<string>(arr, "h") == "ytay", "--h");
//     arr.shift();
//     assert(arr.equals(["-f", "1", "abara"]), "args");

//     string[] narr = ["app", "-f", "--force", "--h", "--", "-v", "1", "abara"];
//     assert(getopt<bool>(narr, "force|f") == true, "-f 2");
//     assert(getopt<bool>(narr, "|v") == false, "-v 2");
//     assert(getopt<bool>(narr, "h") == true, "--h 2");
//     assert(narr.equals(["app", "-f", "--", "-v", "1", "abara"]), "args 2");
// }